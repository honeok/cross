# Description: This configuration file is used to define custom rules for the mihomo gui.
#
# Copyright (c) 2025 honeok <i@honeok.com>
#
# References:
# https://github.com/MetaCubeX/mihomo/blob/Meta/docs/config.yaml
# https://linux.do/t/topic/243618
# https://github.com/yyhhyyyyyy/selfproxy/blob/main/Mihomo/mihomo_multi.yaml
# https://github.com/qichiyuhub/rule/blob/main/config/mihomo/config.yaml
# https://github.com/Kook-9527/Plugin-backup/blob/main/ClashMeta.yaml
#
# SPDX-License-Identifier: GPL-2.0

## 全局配置
port: 7890 # HTTP(S)代理服务器端口
socks-port: 7891 # SOCKS5代理端口
mixed-port: 10801 # HTTP(S)和SOCKS代理混合端口
redir-port: 7892 # 透明代理端口, 用于Linux和MacOS

tproxy-port: 7893 # Linux透明代理服务器端口

allow-lan: true # 允许局域网连接
bind-address: "*" # 绑定IP地址, 仅作用于allow-lan为true, '*'表示所有地址
skip-auth-prefixes: # 设置跳过验证的IP段
  - 127.0.0.1/8
  - ::1/128
lan-allowed-ips: # 允许连接的IP地址段, 仅作用于allow-lan为true, 默认值为0.0.0.0/0和::/0
  - 0.0.0.0/0
  - ::/0

#  find-process-mode has 3 values: always strict off
#  - always: 开启, 强制匹配所有进程
#  - strict: 默认, 由mihomo判断是否开启
#  - off: 不匹配进程, 推荐在路由器上使用此模式
find-process-mode: strict

mode: rule

log-level: warning # 日志等级silent/error/warning/info/debug

ipv6: false # IPv6总开关, 关闭阻断所有IPv6链接和屏蔽DNS请求AAAA记录

tcp-concurrent: true # TCP并发连接所有IP, 将使用最快握手的TCP

# interface-name: en0 # 设置出口网卡

# 全局TLS指纹, 优先低于proxy内的client-fingerprint
# 可选： "chrome" "firefox" "safari" "ios" "random" "none" options.
# Utls is currently support TLS transport in TCP/grpc/WS/HTTP for VLESS/Vmess and trojan.
global-client-fingerprint: chrome

# TCP保持活动间隔
disable-keep-alive: false # 目前在android端强制为true
keep-alive-idle: 600 # 设置TCP连接的空闲超时时间为600秒
keep-alive-interval: 15 # 设置TCP保活探测的间隔时间为15秒

profile:
  store-selected: true # 存储select选择记录
  store-fake-ip: true # 持久化fake-ip

## DNS模块
dns:
  cache-algorithm: arc
  enable: true # 关闭将使用系统DNS
  prefer-h3: false # 是否开启DoH支持HTTP/3, 将并发尝试
  listen: 0.0.0.0:53 # 开启DNS服务器监听
  ipv6: false # false将返回AAAA的空结果
  # ipv6-timeout: 300 # 单位：ms 内部双栈并发时, 向上游查询AAAA时, 等待AAAA的时间, 默认100ms
  default-nameserver: # 指定初始DNS解析服务器, 用于解析mihomo自身需要的域名 (如订阅地址、规则集地址), 只能使用纯IP地址
    - 223.5.5.5
    - 119.29.29.29
  enhanced-mode: fake-ip # 启用Fake-IP模式 or redir-host

  fake-ip-range: 198.18.0.1/16 # fake-ip池设置

  # 配置不使用fake-ip的域名
  fake-ip-filter:
    - "rule-set:private_domain"
    - "rule-set:cn_domain"
    - "rule-set:ntp_domain"
    - "*.lan"
    - "+.local"
    - "+.localdomain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "localhost.ptlogin2.qq.com"
  fake-ip-filter-mode: blacklist  # 配置fake-ip-filter的匹配模式, 默认为blacklist, 即如果匹配成功不返回fake-ip

  # use-hosts: true # 查询hosts

  # 配置后面的nameserver fallback和nameserver-policy向dns服务器的连接过程是否遵守遵守rules规则
  # 如果为false(默认值) 则这三部分的dns服务器在未特别指定的情况下会直连
  # 如果为true, 将会按照rules的规则匹配链接方式 (走代理或直连), 如果有特别指定则任然以指定值为准
  # 仅当proxy-server-nameserver非空时可以开启此选项, 强烈不建议和prefer-h3一起使用
  # 此外, 这三者配置中的dns服务器如果出现域名会采用default-nameserver配置项解析, 也请确保正确配置default-nameserver
  respect-rules: true

  # DNS主要域名配置
  # 支持UDP TCP DoT DoH DoQ
  # 这部分为主要DNS配置, 影响所有直连, 确保使用对大陆解析精准的DNS
  nameserver:
    - https://dns.alidns.com/dns-query
    - https://doh.pub/dns-query

  # 专用于节点域名解析的DNS服务器, 非必要配置项, 如果不填则遵循nameserver-policy nameserver和fallback的配置
  proxy-server-nameserver:
    - https://dns.alidns.com/dns-query
    - https://doh.pub/dns-query

## 节点信息
proxies:
  - name: "🟢 直连"
    type: direct
    udp: true

  # 链式代理流量走向机制 丨 Mihomo本机 <-> 前置节点 <-> 落地节点 <-> Internet互联网
  - name: "🇸🇬 链式代理"
    dialer-proxy: "🇭🇰 香港节点"
    type: socks5
    server: 1.1.1.1
    port: 1080
    username: "12345"
    password: "12345"
    udp: true

## 订阅合集
proxy-providers:
  Airport1:
    type: http
    url: "url"
    interval: 3600 # 自动更新时间(秒)
    proxy: 🟢 直连 # 通过直连拉取机场订阅, 该名字是指策略组或某个代理节点的名字
    health-check: # 节点自动检测延时
      enable: true
      interval: 300
      url: "http://connectivitycheck.gstatic.com/generate_204"
      expected-status: 204 # 当健康检查返回状态码与期望值不符时, 认为节点不可用
    override: # 覆写节点加载时的一些配置项
      skip-cert-verify: true
      udp: true

## 锚点
main: &main {type: select, proxies: [🚀 默认代理, ♻️ 自动选择, 🔯 故障转移, 🔮 负载均衡, 🇸🇬 链式代理, 🇭🇰 香港节点, 🇲🇴 澳门节点, 🇹🇼 台湾节点, 🇸🇬 狮城节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇲🇾 马来节点, 🇺🇲 美国节点, 🇬🇧 英国节点, 🇳🇱 荷兰节点, 🇩🇪 德国节点, 🟢 直连]}
specific: &specific {type: select, proxies: [🇸🇬 链式代理, 🇹🇼 台湾节点, 🇸🇬 狮城节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇲🇾 马来节点, 🇺🇲 美国节点, 🇬🇧 英国节点, 🇳🇱 荷兰节点, 🇩🇪 德国节点]}
island: &island {type: select, proxies: [🚀 默认代理, 🇭🇰 香港节点, 🇲🇴 澳门节点, 🇹🇼 台湾节点, 🟢 直连]}

## 代理分组
# include-all-providers: true 自动引入proxy-providers所有代理集合, 顺序将按照名称排序
proxy-groups:
  #------------------------基础分组------------------------#
  - {name: 🚀 默认代理, type: select, proxies: [♻️ 自动选择, 🔯 故障转移, 🔮 负载均衡, 🇸🇬 链式代理, 🇭🇰 香港节点, 🇲🇴 澳门节点, 🇹🇼 台湾节点, 🇸🇬 狮城节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇲🇾 马来节点, 🇺🇲 美国节点, 🇬🇧 英国节点, 🇳🇱 荷兰节点, 🇩🇪 德国节点, 🟢 直连]}
  # url-test将按照url测试结果使用延迟最低节点
  - {name: ♻️ 自动选择, type: url-test, include-all-providers: true, tolerance: 100, url: "http://connectivitycheck.gstatic.com/generate_204", interval: 300}
  # fallback将按照url测试结果按照节点顺序选择
  - {name: 🔯 故障转移, type: fallback, include-all-providers: true, url: "http://connectivitycheck.gstatic.com/generate_204", interval: 300}
  # load-balance将按照算法随机选择节点
  - {name: 🔮 负载均衡, type: load-balance, include-all-providers: true, url: "http://connectivitycheck.gstatic.com/generate_204", interval: 300, strategy: consistent-hashing}

  #------------------------场景分组------------------------#
  - {name: 📹 YouTube, <<: *main}
  - {name: 🍀 Google, <<: *main}
  - {name: 🤖 AI, <<: *specific}
  - {name: 📺 BiliBili, <<: *island}
  - {name: 👨‍💻 GitHub, <<: *main}
  - {name: 🦊 GitLab, <<: *main}
  - {name: 🐳 Docker, <<: *main}
  - {name: 🐬 OneDrive, <<: *main}
  - {name: 🪟 Microsoft, <<: *main}
  - {name: 🎧 Spotify, <<: *island}
  - {name: 🎵 TikTok, <<: *specific}
  - {name: 📲 Telegram, <<: *main}
  - {name: 🎥 NETFLIX, <<: *specific}
  - {name: ✈️ Speedtest, <<: *main}
  - {name: 💶 PayPal, <<: *main}
  - {name: 🍎 Apple, <<: *main}

  #------------------------地区分组------------------------#
  ## 测速地址: https://ybfl.net/sites/58.html
  - {name: 🇭🇰 香港节点, type: url-test, include-all-providers: true, tolerance: 100, filter: "(?i)港|hk|hongkong|hong kong", url: "http://connectivitycheck.gstatic.com/generate_204", interval: 300}
  - {name: 🇲🇴 澳门节点, type: url-test, include-all-providers: true, tolerance: 100, filter: "(?i)澳|澳门|mo|macau|macao", url: "http://connectivitycheck.gstatic.com/generate_204", interval: 300}
  - {name: 🇹🇼 台湾节点, type: url-test, include-all-providers: true, tolerance: 100, filter: "(?i)台|tw|taiwan|taipei", url: "http://connectivitycheck.gstatic.com/generate_204", interval: 300}
  - {name: 🇸🇬 狮城节点, type: url-test, include-all-providers: true, tolerance: 100, filter: "(?i)新加坡|坡|狮城|SG|Singapore", url: "http://connectivitycheck.gstatic.com/generate_204", interval: 300}
  - {name: 🇯🇵 日本节点, type: url-test, include-all-providers: true, tolerance: 100, filter: "(?i)日本|jp|japan|tokyo|osaka", url: "http://connectivitycheck.gstatic.com/generate_204", interval: 300}
  - {name: 🇰🇷 韩国节点, type: url-test, include-all-providers: true, tolerance: 100, filter: "(?i)韩|kr|korea|seoul", url: "http://connectivitycheck.gstatic.com/generate_204", interval: 300}
  - {name: 🇲🇾 马来节点, type: url-test, include-all-providers: true, tolerance: 100, filter: "(?i)马来|马来西亚|my|mys|malay|malaysia", url: "http://connectivitycheck.gstatic.com/generate_204", interval: 300}
  - {name: 🇺🇲 美国节点, type: url-test, include-all-providers: true, tolerance: 100, filter: "(?i)美|us|united states|america|los angeles|san jose|silicon valley", url: "http://connectivitycheck.gstatic.com/generate_204", interval: 300}
  - {name: 🇬🇧 英国节点, type: url-test, include-all-providers: true, tolerance: 100, filter: "(?i)英|uk|united kingdom|london", url: "http://connectivitycheck.gstatic.com/generate_204", interval: 300}
  - {name: 🇳🇱 荷兰节点, type: url-test, include-all-providers: true, tolerance: 100, filter: "(?i)荷兰|nl|netherlands", url: "http://connectivitycheck.gstatic.com/generate_204", interval: 300}
  - {name: 🇩🇪 德国节点, type: url-test, include-all-providers: true, tolerance: 100, filter: "(?i)德|de|germany|frankfurt", url: "http://connectivitycheck.gstatic.com/generate_204", interval: 300}

  #------------------------特殊分组------------------------#
  - {name: 🎯 全球直连, type: select, proxies: [🟢 直连, 🚀 默认代理]}
  - {name: 🐟 漏网之鱼, <<: *main}

## 规则匹配
rules:
  # 本地局域网
  - DOMAIN-SUFFIX,local,🟢 直连
  - DOMAIN-SUFFIX,localhost,🟢 直连
  - RULE-SET,private_domain,🟢 直连

  # 应用分流
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,ai_domain,🤖 AI
  - RULE-SET,bilibili_domain,📺 BiliBili
  - RULE-SET,github_domain,👨‍💻 GitHub
  - RULE-SET,gitlab_domain,🦊 GitLab
  - RULE-SET,docker_domain, 🐳 Docker
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,spotify_domain,🎧 Spotify
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理

  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve

  - RULE-SET,cn_ip,🎯 全球直连
  - RULE-SET,cn_domain,🎯 全球直连
  - RULE-SET,ntp_domain,🎯 全球直连

  # 兜底规则
  - MATCH,🐟 漏网之鱼

## 规则集
# https://github.com/MetaCubeX/meta-rules-dat
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}

## 订阅规则
rule-providers:
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/main/proxy.list"}

  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  ai_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-ai-!cn.mrs" }
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  bilibili_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bilibili.mrs" }
  docker_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/docker.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  gitlab_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gitlab.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/speedtest.mrs"}
  spotify_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/spotify.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  ntp_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-ntp.mrs"}

  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}